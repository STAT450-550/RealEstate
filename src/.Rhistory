# Vancouver/West Vancouver are special cases for assessment, we omit them for taxClass 1 and 6
rate_class1 <- dat_rate_1 %>% filter(AddressAssessorMunicipalityDesc != "Vancouver" & AddressAssessorMunicipalityDesc != "West Vancouver") %>% ggplot(aes(x=Year,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate for taxClass 1 and all municipalities") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
assess_class1 <- dat_assess_1 %>% filter(AddressAssessorMunicipalityDesc != "Vancouver" & AddressAssessorMunicipalityDesc != "West Vancouver") %>% ggplot(aes(x=Year,y=assessTotal,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("assessTotal for taxClass 1 and all municipalities") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
multiplot(rate_class1 + theme(legend.position = "none"), assess_class1 + theme(legend.position = "none"))
multiplot(rate_class1 + theme(legend.position = "none"), assess_class1 + theme(legend.position = "none"))
rate_class5 <- dat_rate_5 %>% ggplot(aes(x=Year,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate for taxClass 5") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
## Correlation for continuous variables
assess_class <- assessment_aggregate %>% ggplot(aes(x=assessTotal,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$assessTotal, assessment_aggregate$rate)
tax_class <- assessment_aggregate %>% ggplot(aes(x=tax,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and tax - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$tax, assessment_aggregate$rate)
land_class<-assessment_aggregate %>% ggplot(aes(x=landTotal,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and landTotal - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$landTotal, assessment_aggregate$rate)
improvementTotal_class<-assessment_aggregate %>% ggplot(aes(x=improvementTotal,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and improvementTotal - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$improvementTotal, assessment_aggregate$rate)
propertyCount_class<-assessment_aggregate %>% ggplot(aes(x=propertyCount,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and propertyCount - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$propertyCount, assessment_aggregate$rate)
library(plotly)
ggplotly(assess_class)
ggplotly(assess_class)
ggplotly(tax_class)
ggplotly(land_class)
# get predicted tax income for all tax classes and each municipality
assessment_aggregate[,10] <- assessment_aggregate$assessTotal*assessment_aggregate$rate/1000
names(assessment_aggregate)[10] <- paste("predTaxIncome")
dat_pred_income <- assessment_aggregate %>% select(Year,AddressAssessorMunicipalityDesc,TaxClassCode,predTaxIncome)
dat_pred_income <- aggregate(dat_pred_income$predTaxIncome,by=list(Year=dat_pred_income$Year,Municipalities=dat_pred_income$AddressAssessorMunicipalityDesc),FUN=sum)
names(dat_pred_income)[3] <- paste("predTaxIncome")
tax_refactored <- tax_modified
rate_boxes <- ggplot(dat_rate, aes(x=AddressAssessorMunicipalityDesc,y=rate,fill=TaxClassCode)) + geom_boxplot() + facet_wrap(~TaxClassCode) + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none")
rate_boxes
# for each municipality
tax.list <- c("01","05","06")
for (i in 1:21){
if (municipality.list[i] != "Lions Bay") {
plot_rate_pct <- pct_final %>% filter(Municipalities == municipality.list[i]) %>%
filter(TaxClassCode %in% tax.list) %>%
ggplot(aes(x=Year, y=rate_pct, group=TaxClassCode, color=TaxClassCode)) +
geom_line() + ggtitle(municipality.list[i])
plot_assess_pct <- pct_final %>% filter(Municipalities == municipality.list[i]) %>%
filter(TaxClassCode %in% tax.list) %>%
ggplot(aes(x=Year, y=assessTotal_pct, group=TaxClassCode, color=TaxClassCode)) +
geom_line() + ggtitle(municipality.list[i])
plot_tax_pct <- pct_final %>% filter(Municipalities == municipality.list[i]) %>%
filter(TaxClassCode %in% tax.list) %>%
ggplot(aes(x=Year, y=tax, group=TaxClassCode, color=TaxClassCode)) +
geom_line() + ggtitle(municipality.list[i])
multiplot(plot_rate_pct,plot_assess_pct,plot_tax_pct)
}
}
## Correlation for continuous variables
assess_class <- assessment_aggregate %>% ggplot(aes(x=assessTotal,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$assessTotal, assessment_aggregate$rate)
tax_class <- assessment_aggregate %>% ggplot(aes(x=tax,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and tax - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$tax, assessment_aggregate$rate)
land_class<-assessment_aggregate %>% ggplot(aes(x=landTotal,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and landTotal - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$landTotal, assessment_aggregate$rate)
improvementTotal_class<-assessment_aggregate %>% ggplot(aes(x=improvementTotal,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and improvementTotal - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$improvementTotal, assessment_aggregate$rate)
propertyCount_class<-assessment_aggregate %>% ggplot(aes(x=propertyCount,y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and propertyCount - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
cor(assessment_aggregate$propertyCount, assessment_aggregate$rate)
library(plotly)
ggplotly(assess_class)
ggplotly(assess_class)
ggplotly(tax_class)
# for each municipality
tax.list <- c("01","05","06")
for (i in 1:21){
if (municipality.list[i] != "Lions Bay") {
plot_rate_pct <- pct_final %>% filter(Municipalities == municipality.list[i]) %>%
filter(TaxClassCode %in% tax.list) %>%
ggplot(aes(x=Year, y=rate_pct, group=TaxClassCode, color=TaxClassCode)) +
geom_line() + ggtitle(municipality.list[i])
plot_assess_pct <- pct_final %>% filter(Municipalities == municipality.list[i]) %>%
filter(TaxClassCode %in% tax.list) %>%
ggplot(aes(x=Year, y=assessTotal_pct, group=TaxClassCode, color=TaxClassCode)) +
geom_line() + ggtitle(municipality.list[i])
plot_tax_pct <- pct_final %>% filter(Municipalities == municipality.list[i]) %>%
filter(TaxClassCode %in% tax.list) %>%
ggplot(aes(x=Year, y=tax, group=TaxClassCode, color=TaxClassCode)) +
geom_line() + ggtitle(municipality.list[i])
multiplot(plot_rate_pct,plot_assess_pct,plot_tax_pct)
}
}
assessment_aggregate
## Aggregated Data
assessment_aggregate <- read.csv(here("data","assessment_aggregate.csv"))[,-1]
assessment_aggregate
assessment_final
## All Data
assessment_final <- read.csv(here("data","assessment_final.csv"))
## All Data
assessment_final <- read.csv(here("data","assessment_final.csv"))
rate_boxes <- ggplot(dat_rate, aes(x=AddressAssessorMunicipalityDesc,y=rate,fill=TaxClassCode)) + geom_boxplot() + facet_wrap(~TaxClassCode) + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none")
rate_boxes
rate_boxes <- ggplot(assessment_aggregate, aes(x=AddressAssessorMunicipalityDesc,y=rate,fill=TaxClassCode)) + geom_boxplot() + facet_wrap(~TaxClassCode) + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none")
## Aggregated Data
assessment_aggregate <- read.csv(here("data","assessment_aggregate.csv"))[,-1]
rate_boxes <- ggplot(assessment_aggregate, aes(x=AddressAssessorMunicipalityDesc,y=rate,fill=TaxClassCode)) + geom_boxplot() + facet_wrap(~TaxClassCode) + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none")
rate_boxes
# correlation between mill rate and assessment
rate_assess_correlation2 <- assessment_aggregate %>%
group_by(AddressAssessorMunicipalityDesc,TaxClassCode)%>%
summarise(cor(assessTotal, rate))
rate_assess_correlation2
View(assessment_aggregate)
# continuous variables
cor(assessTotal, rate)
# continuous variables
cor(assessment_aggregate$assessTotal, assessment_aggregate$rate)
cor(assessment_aggregate$assessTotal, assessment_aggregate$rate)
# continuous variables
colnames(assessment_aggregate)
# continuous variables
colnames(assessment_aggregate)[1:7]
# continuous variables
colnames(assessment_aggregate)[3:7]
# continuous variables
while(i %in% colnames(assessment_aggregate)[3:7]){
cor(assessment_aggregate$assessTotal, eval(parse(text=paste0("assessment_aggregate$", i))))
}
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
cor(assessment_aggregate$assessTotal, eval(parse(text=paste0("assessment_aggregate$", i))))
}
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
cor(assessment_aggregate$assessTotal, eval(parse(text=paste0("assessment_aggregate$", i))))
}
print(cor(assessment_aggregate$assessTotal, eval(parse(text=paste0("assessment_aggregate$", i)))))
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$assessTotal, eval(parse(text=paste0("assessment_aggregate$", i)))))
}
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$tax, eval(parse(text=paste0("assessment_aggregate$", i)))))
}
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
}
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")
}
ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black"))
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black"))
}
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# continuous variables
for(i in colnames(assessment_aggregate)[3:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle("mill rate and assess - cor") + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle(sprintf("mill rate and %s - cor", i)) + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
print(cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>% ggplot(aes(x=!!as.name(i),y=rate,group=AddressAssessorMunicipalityDesc,color=AddressAssessorMunicipalityDesc)) + geom_point() + ggtitle(sprintf("mill rate and %s - cor", i)) + geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# categorical variables
TaxClassCode <- aov(rate ~ factor(TaxClassCode), data = assessment_aggregate)
summary(TaxClassCode)
Year <- aov(rate_pct ~ factor(Year), data = pct_final)
rate_boxes <- ggplot(assessment_aggregate, aes(x=AddressAssessorMunicipalityDesc,y=rate,fill=TaxClassCode)) + geom_boxplot() + facet_wrap(~TaxClassCode) + theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none")
rate_boxes
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplotly(rate_boxes <- ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none")))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplotly(rate_boxes <- ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(legend.position = "none")))
}
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
sprintf("correlation between mill rate and %s: $s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>%
ggplot(aes(x=!!as.name(i),
y=rate,group=AddressAssessorMunicipalityDesc,
color=AddressAssessorMunicipalityDesc)) +
geom_point() +
ggtitle(sprintf("mill rate vs %s ", i)) +
geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(rate_boxes <- ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
assessment_aggregate[i]<- as.factor(assessment_aggregate[i])
print(ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
assessment_aggregate[i]
## Aggregated Data
assessment_aggregate <- read.csv(here("data","assessment_aggregate.csv"))[,-1]
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
assessment_aggregate[i]<- as.factor(assessment_aggregate[i])
print(ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
assessment_aggregate
## Aggregated Data
assessment_aggregate <- read.csv(here("data","assessment_aggregate.csv"))[,-1]
assessment_aggregate
eval(parse(text=paste0("assessment_aggregate$", i)))<- as.factor(eval(parse(text=paste0("assessment_aggregate$", i))))
# categorical variables
assessment_aggregate)[1:3] <- as.factor(assessment_aggregate)[1:3])
# categorical variables
assessment_aggregate)[1:3] <- as.factor(assessment_aggregate[1:3])
# categorical variables
assessment_aggregate[1:3] <- as.factor(assessment_aggregate[1:3])
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate,fill=!!as.name(i))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=!!as.name(i),y=rate)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
assessment_aggregate
## Aggregated Data
assessment_aggregate <- read.csv(here("data","assessment_aggregate.csv"))[,-1]
# categorical variables
assessment_aggregate[1:3] <- as.factor(assessment_aggregate[1:3])
assessment_aggregate
(assessment_aggregate[1:3]
(assessment_aggregate[1:3]
View(assessment_aggregate)
View(assessment_aggregate)
## Aggregated Data
assessment_aggregate <- read.csv(here("data","assessment_aggregate.csv"))[,-1]
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate)) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i))))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i)))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
sprintf("correlation between mill rate and %s: $s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>%
ggplot(aes(x=!!as.name(i),
y=rate,group=AddressAssessorMunicipalityDesc,
color=AddressAssessorMunicipalityDesc)) +
geom_point() +
ggtitle(sprintf("mill rate vs %s ", i)) +
geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i)))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
sprintf("correlation between mill rate and %s: $s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
sprintf("correlation between mill rate and %s: %s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>%
ggplot(aes(x=!!as.name(i),
y=rate,group=AddressAssessorMunicipalityDesc,
color=AddressAssessorMunicipalityDesc)) +
geom_point() +
ggtitle(sprintf("mill rate vs %s ", i)) +
geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i)))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
sprintf("correlation between mill rate and %s: %s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(ggplotly(assessment_aggregate %>%
ggplot(aes(x=!!as.name(i),
y=rate,group=AddressAssessorMunicipalityDesc,
color=AddressAssessorMunicipalityDesc)) +
geom_point() +
ggtitle(sprintf("mill rate vs %s ", i)) +
geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i)))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
sprintf("correlation between mill rate and %s: %s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i)))))
print(sprintf("correlation between mill rate and %s: %s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i))))))
# continuous variables
for(i in colnames(assessment_aggregate)[4:7]){
print(sprintf("correlation between mill rate and %s: %s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i))))))
print(ggplotly(assessment_aggregate %>%
ggplot(aes(x=!!as.name(i),
y=rate,group=AddressAssessorMunicipalityDesc,
color=AddressAssessorMunicipalityDesc)) +
geom_point() +
ggtitle(sprintf("mill rate vs %s ", i)) +
geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black")))
}
# categorical variables
for(i in colnames(assessment_aggregate)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i)))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
# continuous variables
assessment_transform <- assessment_aggregate
## TODO
for(i in colnames(assessment_transform)[4:7]){
print(sprintf("correlation between mill rate and %s: %s.",
i, cor(assessment_aggregate$rate, eval(parse(text=paste0("assessment_aggregate$", i))))))
print(assessment_aggregate %>%
ggplot(aes(x=!!as.name(i),
y=rate,group=AddressAssessorMunicipalityDesc,
color=AddressAssessorMunicipalityDesc)) +
geom_point() +
ggtitle(sprintf("mill rate vs %s ", i)) +
geom_smooth(aes(group = 1), size = 0.5, method = "lm", se = FALSE, colour = "black"))
}
# categorical variables
for(i in colnames(assessment_transform)[1:3]){
print(ggplot(assessment_aggregate, aes(x=as.factor(!!as.name(i)),y=rate, fill=as.factor(!!as.name(i)))) +
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = "none"))
}
linear_full<-lm(rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount+tax,data=assessment_aggregate)
linear_full<-lm(rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount,data=assessment_aggregate)
summary(linear_full)
library(broom)
linear_full_fit<-augment(linear_full)
sqrt(sum((linear_full_fit$.resid)^2)/nrow(assessment_aggregate))
reduced<-lm(rate~factor(Year)+factor(TaxClassCode)+factor(AddressAssessorMunicipalityDesc)+assessTotal+landTotal, data=assessment_aggregate)
summary(reduced)
reduced_fit<-augment(reduced)
sqrt(sum((reduced_fit$.resid)^2)/nrow(assessment_aggregate))
library(glmnet)
library(dummies)
dummy_year<-dummy(assessment_aggregate$Year)
dummy_municipal<-dummy(assessment_aggregate$AddressAssessorMunicipalityDesc)
dummy_taxclass<-dummy(assessment_aggregate$TaxClassCode)
# build x matrix
x<-cbind(dummy_municipal,dummy_year,dummy_taxclass,assessment_aggregate$assessTotal,assessment_aggregate$landTotal,assessment_aggregate$improvementTotal,assessment_aggregate$propertyCount,assessment_aggregate$tax)
y<-assessment_aggregate$rate
lambdas <- 10^seq(2, -3, by = -.1)
dim(x)
lambdas <- 10^seq(2, -3, by = -.1)
ridge_reg = glmnet(x, y, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
set.seed(450)
cv_ridge <- cv.glmnet(x, y, alpha = 0, lambda = lambdas, nfolds=10)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
predictions_train <- predict(ridge_reg, s = optimal_lambda, newx = x)
# Compute R^2 from true and predicted values
eval_results <- function(true, predicted) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
MSPE = sqrt(SSE/nrow(predicted))
# Model performance metrics
data.frame(
MSPE = MSPE,
Rsquare = R_square
)
}
predictions_train <- predict(ridge_reg, s = optimal_lambda, newx = x)
ridge_r <- eval_results(y, predictions_train)
# Setting alpha = 1 implements lasso regression
set.seed(450)
lasso_reg <- cv.glmnet(x, y, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 10)
# Best
lambda_best <- lasso_reg$lambda.min;lambda_best
lasso_model <- glmnet(x, y, alpha = 1, lambda = lambda_best, standardize = TRUE)
predictions_train <- predict(lasso_model, s = lambda_best, newx = x)
lasso_r <- eval_results(y, predictions_train)
library(caret)
tibble::as_tibble(assessment_aggregate)
cv_10 = trainControl(method = "cv", number = 10)
elastic_net = train(
rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount, data = assessment_aggregate,
method = "glmnet",
trControl = cv_10
)
elastic_net
set.seed(450)
train_ind<-sample(218,218-50)
train<-assessment_aggregate[train_ind,]
test<-assessment_aggregate[-train_ind,]
newx<-test[,-c(8,9)]
y<-test[,c(8)]
linear_1<-lm(rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount+tax,data=train)
newx<-test[,-c(8,9)]
y<-test[,c(8)]
linear_1<-lm(rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount,data=train)
resid<-predict(linear_1,newdata = newx) - y
sqrt(sum(resid^2)/nrow(test))
# reduced variable
linear_2<-lm(rate~factor(Year)+factor(TaxClassCode)+factor(AddressAssessorMunicipalityDesc)+assessTotal+landTotal,data=train)
resid<-predict(linear_2,newdata = newx) - y
sqrt(sum(resid^2)/nrow(test))
# create the whole matrix
y<-as.matrix(assessment_aggregate$rate)
dim(x) # 165  29
dim(y)
# creat x_train matrix and y_train
x_train<-x[train_ind,]
y_train<-y[train_ind,]
# create x_test matrix
x_test<-x[-train_ind,]
y_test<-y[-train_ind,]
# Setting alpha = 1 implements lasso regression
set.seed(450)
lasso_reg <- cv.glmnet(x_train, y_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 10)
# Best
lambda_best <- lasso_reg$lambda.min;lambda_best
lasso_model <- glmnet(x_train, y_train, alpha = 1, lambda = lambda_best, standardize = TRUE)
predictions_test <- predict(lasso_model, s = lambda_best, newx = x_test)
eval_results(y_test, predictions_test)
ridge_reg = glmnet(x_train, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
set.seed(450)
cv_ridge <- cv.glmnet(x_train, y_train, alpha = 0, lambda = lambdas, nfolds=10)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
predictions_test <- predict(ridge_reg, s = optimal_lambda, newx = x_test)
eval_results(y_test, predictions_test)
tibble::as_tibble(assessment_aggregate[train_ind,])
cv_10 = trainControl(method = "cv", number = 10)
elastic_net = train(
rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount+tax,
data = assessment_aggregate[train_ind,],
method = "glmnet",
trControl = cv_10
)
tibble::as_tibble(assessment_aggregate[train_ind,])
cv_10 = trainControl(method = "cv", number = 10)
elastic_net = train(
rate~factor(AddressAssessorMunicipalityDesc)+factor(Year)+factor(TaxClassCode)+assessTotal+landTotal+improvementTotal+propertyCount,
data = assessment_aggregate[train_ind,],
method = "glmnet",
trControl = cv_10
)
elastic_net
# RMSE was used to select the optimal model using the smallest value.
# The final values used for the model were alpha = 1 and lambda = 0.06549203.
elastic_reg = glmnet(x_train, y_train, nlambda = 25, alpha = 1, family = 'gaussian', lambda =  0.06549203)
predictions_test <- predict(elastic_reg, newx = x_test)
eval_results(y_test, predictions_test)
GOF_table <- rbind(
c("OLR full", 0.8874, 0.8707, 1.9843, 2.5902),
c("OLR reduced", 0.8874, 0.8721, 1.9845, 2.5237),
c("Ridge", 0.8868, 0.8707, 1.9896, 2.5675),
c("LASSO", 0.8873, 0.8707, 1.9855, 2.5280),
c("Elastic Net", 0.8625, 0.8707, 2.2366, 2.5486))
colnames(GOF_table) <- c("Model", "Mutiple R-Squared","Adjusted R_Squared", "MSE", "PMSE")
nn=neuralnet(TaxClassTaxRate~Year+TaxClassCode+AssessorAreaCode+AddressAssessorMunicipalityCode+AssessedValueAmt+CurrentYearTotal+TaxOwingAmountTotalCalculated,data=assessment_final, hidden=20, act.fct = "logistic", linear.output = FALSE)
